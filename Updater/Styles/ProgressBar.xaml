<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cv="clr-namespace:Updater.Converters">
    
    <!-- Custom Progress Bar Style 
    
    -->
    <Style TargetType="{x:Type ProgressBar}">
        
        <Style.Resources>
            <cv:ProgressBarFilledToVisibilityConverter x:Key="FilledToVisibilityConverter"/>
        </Style.Resources>

        <!-- Default value for the indicator -->
        <Setter Property="Foreground" Value="#538ce1"/>

        <!-- Template -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                
                    <!-- Rounded shadow-like border around the indicator -->
                    <Border BorderThickness="1" CornerRadius="2">
                    
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#4c4f54" Opacity="0.75"/>
                        </Border.BorderBrush>
                    
                        <!-- Indicator black border
                        
                        There MUST be the decorator element with name PART_Track to get it working.
                        -->
                        <Border BorderThickness="1" BorderBrush="Black" Background="#242424">
                            <Decorator Name="PART_Track">
                                
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                            
                                    <!-- Indicator part itself 
                            
                                    Background of the indicator part is solid color. Gradient is applied
                                    in the inner part on another rectangle.
                                    -->
                                    <Border Name="PART_Indicator" Background="{TemplateBinding Foreground}">
                                
                                        <!-- Gradient overlay
                                
                                        The overlay is applied on to the innermost part of the indicator
                                        -->
                                        <Rectangle>
                                            <Rectangle.Fill>
                                                <LinearGradientBrush Opacity="0.3" StartPoint="0,0" EndPoint="0,1">
                                                    <GradientStop Offset="0" Color="Transparent"/>
                                                    <GradientStop Offset="1" Color="Black"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                    
                                        </Rectangle>

                                    </Border>
                            
                                    <!-- Indicator head
                            
                                    Indicator head is a glowing element right in front of the progress
                                    bar indicator. The head is only visible if not indeterminate.
                                    -->
                                    <Rectangle Name="Head" Width="2" Fill="White"
                                               Visibility="{Binding Path=., RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FilledToVisibilityConverter}}">
                                        <Rectangle.Effect>
                                            <BlurEffect Radius="10" KernelType="Gaussian"/>
                                        </Rectangle.Effect>
                                    </Rectangle>

                                </StackPanel>

                            </Decorator>
                        </Border>
                    
                    </Border>
                    
                    
                    <!-- Triggers -->
                    
                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="IsIndeterminate" Value="True">

                            <Setter TargetName="Head" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Indicator" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="15,15" SpreadMethod="Repeat" MappingMode="Absolute">
                                        <LinearGradientBrush.Transform>
                                            <TranslateTransform />
                                        </LinearGradientBrush.Transform>

                                        <GradientStop Offset="0.5" Color="#4270b4"/>
                                        <GradientStop Offset="0.5" Color="#5089df"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            
                            <Trigger.EnterActions>
                                <BeginStoryboard Name="IndeterminateAnimation">
                                    <Storyboard>
                                        
                                        <!-- 
                                        Working nice but window movement is a little bit choppy
                                        (Background).(LinearGradientBrush.Transform).(TranslateTransform.X)
                                        -->
                                        <DoubleAnimation Duration="00:00:03" From="0" To="30"
                                                         Storyboard.TargetName="PART_Indicator"
                                                         Storyboard.TargetProperty="(Background).(LinearGradientBrush.Transform).(TranslateTransform.X)"
                                                         Timeline.DesiredFrameRate="30"
                                                         RepeatBehavior="Forever"/>
                                        
                                        <!--
                                        Actually working but is there any performance gain?
                                        
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:02" RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="PART_Indicator" Timeline.DesiredFrameRate="30"
                                                                       Storyboard.TargetProperty="(Background).(LinearGradientBrush.Transform).(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.000" Value="0"/>
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.333" Value="5"/>
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.666" Value="10"/>
                                            <SplineDoubleKeyFrame KeyTime="00:00:01.000" Value="15"/>
                                            <SplineDoubleKeyFrame KeyTime="00:00:01.333" Value="20"/>
                                            <SplineDoubleKeyFrame KeyTime="00:00:01.666" Value="25"/>
                                            <SplineDoubleKeyFrame KeyTime="00:00:02.000" Value="30"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        -->
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            
                            <Trigger.ExitActions>
                                <PauseStoryboard BeginStoryboardName="IndeterminateAnimation"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    
</ResourceDictionary>